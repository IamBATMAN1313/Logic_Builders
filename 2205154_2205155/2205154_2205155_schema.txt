-- Enable UUID generation
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Trigger function to auto-update updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;


-- 1. general_user
CREATE TABLE general_user (
  id             UUID      PRIMARY KEY DEFAULT uuid_generate_v4(),
  username       VARCHAR(100) UNIQUE NOT NULL,
  email          VARCHAR(100) UNIQUE NOT NULL,
  password_hash  TEXT      NOT NULL,
  contact_no     VARCHAR(20) UNIQUE,
  profile_img    TEXT,
  full_name      VARCHAR(100) NOT NULL,
  gender         VARCHAR(10),
  created_at     TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at     TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);
CREATE TRIGGER trg_general_user_updated_at
  BEFORE UPDATE ON general_user
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();


-- 2. admin
CREATE TABLE admin (
  id               UUID      PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id          UUID      NOT NULL REFERENCES general_user(id) ON DELETE CASCADE,
  clearance_level  VARCHAR(30) NOT NULL,
  is_employed      BOOLEAN   NOT NULL DEFAULT TRUE,
  hire_date        TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  created_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);
CREATE TRIGGER trg_admin_updated_at
  BEFORE UPDATE ON admin
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();
CREATE INDEX idx_admin_user_id ON admin(user_id);


-- 3. customer
CREATE TABLE customer (
  id          UUID      PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id     UUID      NOT NULL REFERENCES general_user(id) ON DELETE CASCADE,
  points      INTEGER   NOT NULL DEFAULT 0 CHECK (points >= 0),
  created_at  TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at  TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);
CREATE TRIGGER trg_customer_updated_at
  BEFORE UPDATE ON customer
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();
CREATE INDEX idx_customer_user_id ON customer(user_id);


-- 4. product_category
CREATE TABLE product_category (
  id           SERIAL    PRIMARY KEY,
  name         VARCHAR(100) UNIQUE NOT NULL,
  description  TEXT,
  image_url    TEXT,
  created_at   TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at   TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);
CREATE TRIGGER trg_product_category_updated_at
  BEFORE UPDATE ON product_category
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();


-- 5. product
CREATE TABLE product (
  id                SERIAL    PRIMARY KEY,
  name              VARCHAR(200) NOT NULL,
  excerpt           TEXT,
  image_url         TEXT,
  price             NUMERIC(10,2) NOT NULL CHECK (price >= 0),
  discount_status   BOOLEAN   NOT NULL DEFAULT FALSE,
  discount_percent  NUMERIC(5,2) NOT NULL DEFAULT 0 CHECK (discount_percent BETWEEN 0 AND 100),
  availability      BOOLEAN   NOT NULL DEFAULT TRUE,
  date_added        DATE      NOT NULL DEFAULT CURRENT_DATE,
  category_id       INTEGER   NOT NULL REFERENCES product_category(id) ON DELETE CASCADE,
  created_at        TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at        TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);
CREATE TRIGGER trg_product_updated_at
  BEFORE UPDATE ON product
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();
CREATE INDEX idx_product_category_id ON product(category_id);


-- 6. product_attribute
CREATE TABLE product_attribute (
  id           UUID      PRIMARY KEY DEFAULT uuid_generate_v4(),
  product_id   INTEGER   NOT NULL REFERENCES product(id) ON DELETE CASCADE,
  cost         NUMERIC(10,2) NOT NULL CHECK (cost >= 0),
  units_sold   INTEGER   NOT NULL DEFAULT 0 CHECK (units_sold >= 0),
  stock        INTEGER   NOT NULL DEFAULT 0 CHECK (stock >= 0),
  created_at   TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at   TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);
CREATE TRIGGER trg_product_attribute_updated_at
  BEFORE UPDATE ON product_attribute
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();
CREATE INDEX idx_product_attribute_product_id ON product_attribute(product_id);


-- 7. template
CREATE TABLE template (
  id          SERIAL    PRIMARY KEY,
  name        VARCHAR(100) NOT NULL,
  created_at  TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at  TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);
CREATE TRIGGER trg_template_updated_at
  BEFORE UPDATE ON template
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();


-- 8. template_product
CREATE TABLE template_product (
  id           SERIAL  PRIMARY KEY,
  template_id  INTEGER NOT NULL REFERENCES template(id) ON DELETE CASCADE,
  product_id   INTEGER NOT NULL REFERENCES product(id) ON DELETE CASCADE,
  quantity     INTEGER NOT NULL CHECK (quantity > 0),
  created_at   TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);
CREATE INDEX idx_template_product_template_id ON template_product(template_id);
CREATE INDEX idx_template_product_product_id ON template_product(product_id);


-- 9. build
CREATE TABLE build (
  id            SERIAL    PRIMARY KEY,
  customer_id   UUID      NOT NULL REFERENCES customer(id) ON DELETE CASCADE,
  template_id   INTEGER   REFERENCES template(id) ON DELETE SET NULL,
  created_at    TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at    TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);
CREATE TRIGGER trg_build_updated_at
  BEFORE UPDATE ON build
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();
CREATE INDEX idx_build_customer_id ON build(customer_id);
CREATE INDEX idx_build_template_id ON build(template_id);


-- 10. build_product
CREATE TABLE build_product (
  id         SERIAL  PRIMARY KEY,
  build_id   INTEGER NOT NULL REFERENCES build(id) ON DELETE CASCADE,
  product_id INTEGER NOT NULL REFERENCES product(id) ON DELETE CASCADE,
  quantity   INTEGER NOT NULL CHECK (quantity > 0),
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);
CREATE INDEX idx_build_product_build_id ON build_product(build_id);
CREATE INDEX idx_build_product_product_id ON build_product(product_id);


-- 11. cart
CREATE TABLE cart (
  id          SERIAL    PRIMARY KEY,
  customer_id UUID      NOT NULL REFERENCES customer(id) ON DELETE CASCADE,
  created_at  TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at  TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);
CREATE TRIGGER trg_cart_updated_at
  BEFORE UPDATE ON cart
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();
CREATE INDEX idx_cart_customer_id ON cart(customer_id);


-- 12. cart_item
CREATE TABLE cart_item (
  id           SERIAL    PRIMARY KEY,
  cart_id      INTEGER   NOT NULL REFERENCES cart(id) ON DELETE CASCADE,
  product_id   INTEGER   REFERENCES product(id) ON DELETE CASCADE,
  build_id     INTEGER   REFERENCES build(id) ON DELETE CASCADE,
  quantity     INTEGER   NOT NULL CHECK (quantity > 0),
  unit_price   NUMERIC(10,2) NOT NULL CHECK (unit_price >= 0),
  created_at   TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CHECK (
    (product_id IS NOT NULL AND build_id IS NULL)
    OR
    (product_id IS NULL AND build_id IS NOT NULL)
  )
);
CREATE INDEX idx_cart_item_cart_id ON cart_item(cart_id);
CREATE INDEX idx_cart_item_product_id ON cart_item(product_id);


-- 13. shipping_address
CREATE TABLE shipping_address (
  id           SERIAL    PRIMARY KEY,
  customer_id  UUID      REFERENCES customer(id) ON DELETE CASCADE,
  address      TEXT      NOT NULL,
  city         VARCHAR(100) NOT NULL,
  zip_code     VARCHAR(20) NOT NULL,
  country      VARCHAR(100) NOT NULL,
  created_at   TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at   TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);
CREATE TRIGGER trg_shipping_address_updated_at
  BEFORE UPDATE ON shipping_address
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();
CREATE INDEX idx_shipping_address_customer_id ON shipping_address(customer_id);


-- 14. promo
CREATE TABLE promo (
  id               SERIAL    PRIMARY KEY,
  name             VARCHAR(100) UNIQUE NOT NULL,
  discount_percent NUMERIC(5,2) NOT NULL CHECK (discount_percent BETWEEN 0 AND 100),
  status           VARCHAR(20) NOT NULL,
  start_date       DATE      NOT NULL DEFAULT CURRENT_DATE,
  end_date         DATE      NOT NULL,
  created_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);
CREATE TRIGGER trg_promo_updated_at
  BEFORE UPDATE ON promo
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();


-- 15. "order"
CREATE TABLE "order" (
  id                   SERIAL    PRIMARY KEY,
  customer_id          UUID      NOT NULL REFERENCES customer(id) ON DELETE CASCADE,
  promo_id             INTEGER   REFERENCES promo(id) ON DELETE SET NULL,
  order_date           DATE      NOT NULL DEFAULT CURRENT_DATE,
  payment_status       BOOLEAN   NOT NULL DEFAULT FALSE,
  payment_method       VARCHAR(50) NOT NULL,
  status               VARCHAR(30) NOT NULL DEFAULT 'pending',
  delivery_charge      NUMERIC(10,2) NOT NULL CHECK (delivery_charge >= 0),
  discount_amount      NUMERIC(10,2) NOT NULL DEFAULT 0 CHECK (discount_amount >= 0),
  total_price          NUMERIC(10,2) NOT NULL CHECK (total_price >= 0),
  transaction_id       VARCHAR(100),
  shipping_address_id  INTEGER   NOT NULL REFERENCES shipping_address(id) ON DELETE CASCADE,
  created_at           TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at           TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);
CREATE TRIGGER trg_order_updated_at
  BEFORE UPDATE ON "order"
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();
CREATE INDEX idx_order_customer_id ON "order"(customer_id);
CREATE INDEX idx_order_promo_id ON "order"(promo_id);


-- 16. product_qa
CREATE TABLE product_qa (
  id            SERIAL    PRIMARY KEY,
  product_id    INTEGER   NOT NULL REFERENCES product(id) ON DELETE CASCADE,
  customer_id   UUID      NOT NULL REFERENCES customer(id) ON DELETE CASCADE,
  question_text TEXT      NOT NULL,
  time_asked    TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);
CREATE INDEX idx_product_qa_product_id ON product_qa(product_id);
CREATE INDEX idx_product_qa_customer_id ON product_qa(customer_id);


-- 17. qa_answer
CREATE TABLE qa_answer (
  id             SERIAL    PRIMARY KEY,
  question_id    INTEGER   NOT NULL REFERENCES product_qa(id) ON DELETE CASCADE,
  answer_text    TEXT,
  time_answered  TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  admin_id       UUID      REFERENCES admin(id) ON DELETE SET NULL
);
CREATE INDEX idx_qa_answer_question_id ON qa_answer(question_id);
CREATE INDEX idx_qa_answer_admin_id ON qa_answer(admin_id);


-- 18. review
CREATE TABLE review (
  id            SERIAL    PRIMARY KEY,
  product_id    INTEGER   NOT NULL REFERENCES product(id) ON DELETE CASCADE,
  customer_id   UUID      NOT NULL REFERENCES customer(id) ON DELETE CASCADE,
  review_text   TEXT,
  rating        NUMERIC(2,1) NOT NULL CHECK (rating BETWEEN 0 AND 5),
  time_added    TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);
CREATE INDEX idx_review_product_id ON review(product_id);
CREATE INDEX idx_review_customer_id ON review(customer_id);


-- 19. wishlist
CREATE TABLE wishlist (
  customer_id  UUID      NOT NULL REFERENCES customer(id) ON DELETE CASCADE,
  product_id   INTEGER   NOT NULL REFERENCES product(id) ON DELETE CASCADE,
  added_at     TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (customer_id, product_id)
);


CREATE TABLE message (
  id            SERIAL    PRIMARY KEY,
  sender_id     UUID      NOT NULL REFERENCES general_user(id) ON DELETE CASCADE,
  receiver_id   UUID      NOT NULL REFERENCES general_user(id) ON DELETE CASCADE,
  message_text  TEXT      NOT NULL,
  seen_status   BOOLEAN   NOT NULL DEFAULT FALSE,
  sent_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);
CREATE INDEX idx_message_sender_id ON message(sender_id);
CREATE INDEX idx_message_receiver_id ON message(receiver_id);


-- 21. notification
CREATE TABLE notification (
  id                 SERIAL    PRIMARY KEY,
  user_id            UUID      NOT NULL REFERENCES general_user(id) ON DELETE CASCADE,
  notification_text  TEXT      NOT NULL,
  seen_status        BOOLEAN   NOT NULL DEFAULT FALSE,
  created_at         TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);
CREATE INDEX idx_notification_user_id ON notification(user_id);
